#!/usr/bin/env sh
# Author: Philipp Schmitt <philipp@schmitt.co>
# Version: 0.2.1

# TODO Grant acces to a specific table

# default options
MYSQL_HOST=localhost
MYSQL_USER=root
MYSQL_PASS=
PASSWORD_LENGTH=20

usage() {
    echo "Usage: $(basename $0) OPTIONS CMD"
    echo
    echo "OPTIONS: -H, -u, -p, -n, -d, -v, -m, -r, -b, -z"
    echo "    -H: MySQL host"
    echo "    -u: MySQL username"
    echo "    -p: MySQL password"
    echo "    -n: Dry run. Don't execute any SQL command."
    echo "    -d: Debug mode"
    echo "    -v: Verbose output"
    echo "    -m: Create database with same name as user"
    echo "    -r: Delete both user and database"
    echo "    -b: Set backup directory"
    echo "    -z: Compress backup"
    echo
    echo "COMMANDS: create|delete|backup|dump|truncate|grant|ls"
    echo "    create [db|user|table] ITEM"
    echo "        Create user or database"
    echo "        NOTE: To create a table you have to specify the database:"
    echo "            \$ $(basename $0) create table DATABASE TABLE # or: DATABASE.TABLE"
    echo "        -m: Create a new database with the same name as the new user"
    echo "    delete [db|user|table] ITEM"
    echo "        Delete user, database or table"
    echo "        NOTE: To delete a table you have to specify the database:"
    echo "            \$ $(basename $0) delete table DATABASE TABLE # or: DATABASE.TABLE"
    echo "        -r: Remove both user and database"
    echo "    backup DATABASE [TABLE]"
    echo "        Backup database or specific table"
    echo "        -z: Compress backup (gzip)"
    echo "        -b DIR: Set backup directory (default is PWD)"
    echo "    dump DATABASE [TABLE]"
    echo "        Dump whole database or specific table(s)"
    echo "    truncate DATABASE TABLE"
    echo "        Truncate a table"
    echo "        NOTE: To truncate a table you have to specify the database:"
    echo "            \$ $(basename $0) truncate DATABASE TABLE # or: DATABASE.TABLE"
    echo "    grant DATABASE USER PASSWORD"
    echo "        Grant access to database to user"
    echo "    ls [db|user|grant|tables]"
    echo "        List databases, users, permissions, tables"
    echo "    sql [DATABASE] SQL_QUERY"
    echo "        Execute arbitrary SQL command on DATABASE"
    echo "        NOTE: When database is omitted none will be selected"
    [[ -n "$1" ]] && exit "$1"
}

# Split a string like "database.table" in two
split_db_table() {
    tr '.' ' ' <<< "$1"
}

# Return the amount of dots contained in a string
count_dots() {
    grep -o '\.' <<< "$1" | wc -l
}

generate_password() {
    tr -dc '[:alnum:]' < /dev/urandom | fold -w "$1" | head -1
}

sql_exec() {
    local mysql_db="$1"
    local query="$2"
    [[ "$VERBOSE" -eq 1 ]] && {
        local msg="Executing SQL command $query"
        [[ -n "$mysql_db" ]] && msg="$msg on $mysql_db"
        echo "$msg"
    }
    $MYSQL_CMD "$query" "$mysql_db"
}

create_user() {
    local query="CREATE USER '$1'@'$MYSQL_HOST' IDENTIFIED BY '$2';"
    [[ "$VERBOSE" -eq 1 ]] && echo "Create user $1"
    $MYSQL_CMD "$query"
}

create_db() {
    local query="CREATE DATABASE $1;" # IF NOT EXISTS?
    [[ "$VERBOSE" -eq 1 ]] && echo "Create database $1"
    $MYSQL_CMD "$query"
}

create_table() {
    local mysql_db="$1"
    local mysql_table="$2"
    local pk_field="id"
    local query="\
        USE $mysql_db;\
        CREATE TABLE $mysql_table (\
            $pk_field INT UNSIGNED NOT NULL AUTO_INCREMENT, \
            primary key ($pk_field)\
        );"
    # IF NOT EXISTS?
    [[ "$VERBOSE" -eq 1 ]] && echo "Create table '$mysql_db'.'$mysql_table'"
    $MYSQL_CMD "$query"
}

grant() {
    local mysql_db="$1"
    local mysql_user="$2"
    local mysql_pass="$3"
    local query="\
        GRANT ALL ON ${mysql_db}.* TO '$mysql_user'@'$MYSQL_HOST' \
        IDENTIFIED BY '$mysql_pass'; \
        FLUSH PRIVILEGES;"
    [[ "$VERBOSE" -eq 1 ]] && echo "Grant all on $mysql_db to $mysql_user"
    $MYSQL_CMD "$query"
}

delete_user() {
    # MySQL < 5.0.2
    # local query="DROP USER '$1'@'$MYSQL_HOST';"
    # MySQL > 5.0.2
    # local query="DROP USER '$1';"
    local mysql_user="$1"
    local query="DROP USER '$mysql_user'@'$MYSQL_HOST';"
    [[ "$VERBOSE" -eq 1 ]] && echo "Delete user $mysql_user"
    $MYSQL_CMD "$query"
}

delete_db() {
    local mysql_db="$1"
    local query="DROP DATABASE $mysql_db;" # IF EXISTS?
    [[ "$VERBOSE" -eq 1 ]] && echo "Delete database $mysql_db"
    $MYSQL_CMD "$query"
}

delete_table() {
    local mysql_db="$1"
    local mysql_table="$2"
    local query="DROP TABLE $mysql_db.$mysql_table;" # IF EXISTS?
    [[ "$VERBOSE" -eq 1 ]] && echo "Delete table '$mysql_db'.'$mysql_table'"
    # TODO Update GRANT rights since they remain after deletion
    $MYSQL_CMD "$query"
}

ls_db() {
    local query="show databases;"
    [[ "$VERBOSE" -eq 1 ]] && echo "List databases"
    $MYSQL_CMD "$query"
}

ls_tables() {
    local mysql_db="$1"
    local query="SHOW TABLES FROM $mysql_db;"
    [[ "$VERBOSE" -eq 1 ]] && echo "List table on $mysql_db"
    $MYSQL_CMD "$query"
}

ls_users() {
    local query="SELECT User FROM mysql.user;"
    [[ "$VERBOSE" -eq 1 ]] && echo "List users"
    $MYSQL_CMD "$query"
}

ls_grants() {
    local query="SHOW GRANTS FOR '$1'@'$MYSQL_HOST';"
    [[ "$VERBOSE" -eq 1 ]] && echo "List grants"
    $MYSQL_CMD "$query"
}

dump() {
    $MYSQL_DUMP_CMD "$@"
}

backup() {
    local mysql_db="$1"
    local mysql_table="$2"
    local backup_file="$3"
    local save_file="> $backup_file"
    [[ "$mysql_db" == 'all' ]] && mysql_db='--all-databases'
    [[ "$COMPRESSION" -eq 1 ]] && save_file="| gzip -c $save_file"
    local backup_cmd="$MYSQL_DUMP_CMD --lock-tables=false $mysql_db $mysql_table $save_file"
    [[ "$VERBOSE" ]] && echo "Back up $mysql_db.$mysql_table to $backup_file"
    [[ "$DEBUG" -eq 1 ]] && echo "$backup_cmd"
    eval "$backup_cmd"
}

truncate() {
    local mysql_db="$1"
    local mysql_table="$2"
    local query="TRUNCATE TABLE $mysql_db.$mysql_table;"
    [[ "$VERBOSE" -eq 1 ]] && echo "Truncating $mysql_db.$mysql_table"
    $MYSQL_CMD "$query"
}

recap_db_delete() {
    echo "Successfully removed database '$1'"
}

recap_table_delete() {
    echo "Successfully removed table '$1'.'$2'"
}

recap_user_delete() {
    echo "Successfully removed user '$1'"
}

recap_db_create() {
    echo "Successfully created database '$1'"
}

recap_table_create() {
    echo "Successfully created table '$1'.'$2'"
}

recap_user_create() {
    echo "Successfully created user '$1' with password '$2'"
}

recap_grant() {
    echo "Successfully granted access to database '$1' to user '$2'"
}

recap_backup() {
    local backup_item="'$1'"
    [[ -n "$2" ]] && backup_item="${backup_item}.'${2}'"
    echo "Successfully backed up $backup_item to '$3'"
}

recap_truncate() {
    echo "Successfully truncated table '$1'.'$2'"
}

OPTS=$(getopt -o b:dhH:l:mnp:ru:vz --long backup-dir:,debug,help,host:,password-length:,dryrun,create-db,password:,recursive,username:,verbose,compress -n '$(basename $0)' -- "$@")
eval set -- "$OPTS"

while :
do
    case "$1" in
        -d|--debug)
            DEBUG=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -n|--dryrun)
            DRYRUN=1
            shift
            ;;
        -h|--help)
            usage 0
            ;;
        -H|--host)
            MYSQL_HOST="$2"
            shift 2
            ;;
        -u|--username)
            MYSQL_USER="$2"
            shift 2
            ;;
        -p|--password)
            MYSQL_PASS="$2"
            shift 2
            ;;
        -r|--recursive)
            RECURSIVE=1
            shift
            ;;
        -m|--create-db)
            CREATE_DB=1
            shift
            ;;
        -p|--password-length)
            PASSWORD_LENGTH="$2"
            shift 2
            ;;
        -b|--backup-dir)
            BACKUP_DIR="$2"
            shift 2
            ;;
        -z|--compress)
            COMPRESSION=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal error!"
            exit 1
            ;;
    esac
done

MYSQL_CMD="mysql -h $MYSQL_HOST -u${MYSQL_USER} -p${MYSQL_PASS} -e"
MYSQL_DUMP_CMD="mysqldump -h $MYSQL_HOST -u${MYSQL_USER} -p${MYSQL_PASS}"

[[ "$DRYRUN" -eq 1 ]] && {
    MYSQL_CMD="echo $MYSQL_CMD"
    MYSQL_DUMP_CMD="echo $MYSQL_DUMP_CMD"
}

case "$1" in
    h|help)
        usage 0
        ;;
    c|create|n|new)
        case "$2" in
            u|user)
                mysql_user="$3"
                mysql_pass="$4"
                [[ -n "$mysql_user" ]] || usage 2
                [[ -z "$mysql_pass" ]] && {
                    mysql_pass="$(generate_password $PASSWORD_LENGTH)"
                }
                create_user "$mysql_user" "$mysql_pass" && {
                    recap_user_create "$mysql_user" "$mysql_pass"
                    if [[ "$CREATE_DB" -eq 1 ]]
                    then
                        create_db "$mysql_user" && {
                            recap_db_create "$mysql_db"
                            grant "$mysql_user" "$mysql_user" "$mysql_pass" && {
                                recap_grant "$mysql_db" "$mysql_user"
                            }
                        }
                    else
                        true # ensure we return true
                    fi
                }
                ;;
            d|db|database)
                # TODO
                mysql_db="$3"
                [[ -n "$mysql_db" ]] || usage 2
                create_db "$mysql_db" && {
                    recap_db_create "$mysql_db"
                }
                ;;
            t|table)
                mysql_db="$3"
                mysql_table="$4"
                [[ -z "$mysql_table" ]] && {
                    [[ "$(count_dots $mysql_db)" -gt 0 ]] && {
                        read mysql_db mysql_table <<< "$(split_db_table $mysql_db)"
                    }
                }
                [[ -n "$mysql_db" ]] || usage 2
                [[ -n "$mysql_table" ]] || usage 2
                create_table "$mysql_db" "$mysql_table" && {
                    recap_table_create "$mysql_db" "$mysql_table"
                }
                ;;
            *)
                usage 2
                ;;
        esac
        ;;
    d|delete|rm|remove)
        case "$2" in
            u|user)
                mysql_user="$3"
                [[ -n "$mysql_user" ]] || usage 2
                delete_user "$mysql_user" && {
                    recap_user_delete "$mysql_user"
                    # Delete database having the same name as user
                    if [[ "$RECURSIVE" -eq 1 ]]
                    then
                        mysql_db="$mysql_user"
                        delete_db "$mysql_db" && {
                            recap_db_delete "$mysql_db"
                        }
                    else
                        true # ensure we return true
                    fi
                }
                ;;
            d|db|database)
                mysql_db="$3"
                [[ -n "$mysql_db" ]] || usage 2
                delete_db "$mysql_db" && recap_db_delete "$mysql_db"
                ;;
            t|table)
                mysql_db="$3"
                mysql_table="$4"
                [[ -n "$mysql_db" ]] || usage 2
                [[ -z "$mysql_table" ]] && {
                    if [[ "$(count_dots $mysql_db)" -gt 0 ]]
                    then
                        read mysql_db mysql_table <<< "$(split_db_table $mysql_db)"
                    else
                        usage 2
                    fi
                }
                delete_table "$mysql_db" "$mysql_table" && {
                    recap_table_delete "$mysql_db" "$mysql_table"
                }
                ;;
        esac
        ;;
    b|backup)
        mysql_db="$2"
        mysql_table="$3"
        [[ -n "$mysql_db" ]] || usage 2
        [[ -z "$BACKUP_DIR" ]] && BACKUP_DIR=$(pwd)
        # Remove trailing '/'
        BACKUP_DIR=$(sed 's|/\+$||' <<< "$BACKUP_DIR")
        backup_file="${BACKUP_DIR}/${mysql_db}"
        [[ -n "$mysql_table" ]] && backup_file="${backup_file}.${mysql_table}"
        backup_file="${backup_file}_$(date '+%d%m%Y_%H%M%S').log"
        [[ "$COMPRESSION" -eq 1 ]] && backup_file="${backup_file}.gz"
        backup "$mysql_db" "$mysql_table" "$backup_file" && {
            recap_backup "$mysql_db" "$mysql_table" "$backup_file"
        }
        ;;
    dump)
        [[ -n "$2" ]] || usage 2
        shift
        dump "$@"
        ;;
    t|truncate)
        mysql_db="$2"
        mysql_table="$3"
        [[ -n "$mysql_db" ]] || usage 2
        [[ -z "$mysql_table" ]] && {
            [[ "$(count_dots $mysql_db)" -gt 0 ]] && {
                read mysql_db mysql_table <<< "$(split_db_table $mysql_db)"
            } || usage 2
        }
        truncate "$mysql_db" "$mysql_table" && {
            recap_truncate "$mysql_db" "$mysql_table"
        }
        ;;
    g|grant)
        mysql_db="$2"
        mysql_user="$3"
        mysql_pass="$4"
        [[ -n "$mysql_db" ]] || usage 2
        [[ -n "$mysql_user" ]] || usage 2
        [[ -n "$mysql_pass" ]] || usage 2
        grant "$mysql_db" "$mysql_user" "$mysql_pass" && {
            recap_grant "$mysql_db" "$mysql_user"
        }
        ;;
    l|ls|list)
        case "$2" in
            u|user|users)
                ls_users
                ;;
            d|db|database)
                ls_db
                ;;
            g|grants)
                mysql_db="$3"
                [[ -n "$mysql_db" ]] || usage 2
                ls_grants "$mysql_db"
                ;;
            t|tables)
                mysql_db="$3"
                [[ -n "$mysql_db" ]] || usage 2
                ls_tables "$mysql_db"
                ;;
            '')
                ls_db
                ls_users
                ;;
            *)
                usage 2
                ;;
        esac
        ;;
    s|sql)
        case $# in
            2)
                mysql_db=
                mysql_query="$2"
                ;;
            3)
                mysql_db="$2"
                mysql_query="$3"
                ;;
        esac
        sql_exec "$mysql_db" "$mysql_query"
        ;;
    *)
        usage 2
        ;;
esac

RESULT=$?

[[ "$DEBUG" -eq 1 ]] && {
    echo "OPTS: $OPTS"
    echo "Verbose: $VERBOSE"
    echo "Dryrun: $DRYRUN"
    echo "MySQL host: $MYSQL_HOST"
    echo "MySQL user: $MYSQL_USER"
    echo "MySQL pass: $MYSQL_PASS"
    echo "MySQL cmd: $MYSQL_CMD"
    echo "Create DB: $CREATE_DB"
    echo "Backup dir: $BACKUP_DIR"
    echo "Compression: $COMPRESSION"
    echo "Remaining arguments:"
    for arg do echo '--> '"\`$arg'" ; done
}

exit $RESULT
